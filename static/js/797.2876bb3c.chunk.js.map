{"version":3,"file":"static/js/797.2876bb3c.chunk.js","mappings":"sNAoDMA,GAAiBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,SAAlBD,EAjBL,SAAH,GAAiC,IAA3BE,EAAY,EAAZA,aAAcC,EAAK,EAALA,MAC/B,OACI,kBAAMC,SAAUF,EAAa,WACxBG,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,KAC1CF,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAAEC,KAAM,cAC/DH,EAAAA,EAAAA,IAAY,KAAM,aAAc,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAACC,KAAM,YAAa,eACvEL,IAAS,gBAAKM,UAAWC,EAAAA,EAAAA,iBAAuB,SAC5CP,KAEL,0BACI,0CAIhB,IAyBA,WAAeQ,EAAAA,EAAAA,KAJS,SAACC,GAAK,MAAM,CAChCC,OAAQD,EAAME,KAAKD,OACtB,GAEuC,CAAEE,MAAAA,EAAAA,IAA1C,EAnBc,SAACC,GAKX,OAAIA,EAAMH,QACC,SAAC,KAAQ,CAACI,GAAI,cAGlB,4BACH,mCACA,SAAClB,EAAc,CAACK,SAVH,SAACc,GACdF,EAAMD,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAC5D,MAUJ,G,6NClDMC,EAAc,SAAH,GAAW,EAALC,MAA+C,IAAzC,EAAD,EAAEC,KAAOC,EAAO,EAAPA,QAAStB,EAAK,EAALA,MAAQuB,EAAQ,EAARA,SAC5CC,EAAWF,GAAWtB,EAC5B,OACI,iBAAKM,UAAWmB,EAAAA,EAAAA,YAAqB,KAAOD,EAAWC,EAAAA,EAAAA,MAAe,IAAI,WACtE,yBACKF,IAEJC,IAAY,0BAAOxB,MAGhC,EAEa0B,EAAW,SAACb,GACrB,IAAQO,EAAqCP,EAArCO,MAAuBO,GAAcd,EAA9BQ,KAA8BR,EAAxBe,OAAmB,OAAKf,EAAK,IAClD,OAAO,SAACM,GAAW,kBAAKN,GAAK,cAAE,uCAAcO,GAAWO,MAC5D,EAEavB,EAAQ,SAACS,GAClB,IAAQO,EAAqCP,EAArCO,MAAuBO,GAAcd,EAA9BQ,KAA8BR,EAAxBe,OAAmB,OAAKf,EAAK,IAClD,OAAO,SAACM,GAAW,kBAAKN,GAAK,cAAE,oCAAWO,GAAWO,MACzD,EAEazB,EAAc,SAAC2B,EAAaC,EAAMC,EAAYC,GAAsC,IAA3BnB,EAAK,uDAAG,CAAC,EAAGoB,EAAI,uDAAG,GACrF,OAAQ,4BACJ,SAAC,KAAK,QAACJ,YAAaA,EAAaC,KAAMA,EACnCI,SAAUH,EACVC,UAAWA,GACPnB,IACN,IAAEoB,IAEZ,C,8EChDO,IAAM9B,EAAW,SAAAgC,GACpB,IAAIA,EAEJ,MAAO,mBACX,EAEaC,EAAmB,SAACC,GAAS,OAAK,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAS,WAGnE,CAAC,C,qBCTD,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wC","sources":["components/Login/Login.jsx","components/common/FormsControls/FormsControls.jsx","utils/validators/validators.jsx","webpack://react-kabzda-1/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input, createField } from '../common/FormsControls/FormsControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Navigate } from 'react-router-dom';\r\nimport style from \"../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\n// Before refactoring\r\n/*const LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Email\"} name={\"email\"}\r\n                    validate={[required]} component={Input} />\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"}\r\n                    validate={[required]} component={Input} />\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"} /> remember me\r\n            </div>\r\n            { props.error && <div className={style.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}*/\r\n// After refactoring\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"Email\", \"email\", [required], Input)}\r\n            {createField(\"Password\", \"password\", [required], Input, { type: \"password\" })}\r\n            {createField(null, \"rememberMe\", [required], Input, {type: \"checkbox\"}, \"remember me\")}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)\r\n\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Navigate to={\"/profile\"} />\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login);","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport { Field } from 'redux-form';\r\n\r\n\r\n/* before refactoring\r\nconst FormControl = ({ input, meta, child, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}*/\r\n// after refactoring\r\nconst FormControl = ({ input, meta: {touched, error}, children }) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => {\r\n    return (<div>\r\n        <Field placeholder={placeholder} name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        /> {text}\r\n    </div>)\r\n}","export const required = value => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__lb66s\",\"error\":\"FormsControls_error__Gk6yp\",\"formSummaryError\":\"FormsControls_formSummaryError__+LhkT\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","Input","type","className","style","connect","state","isAuth","auth","login","props","to","formData","email","password","rememberMe","FormControl","input","meta","touched","children","hasError","styles","Textarea","restProps","child","placeholder","name","validators","component","text","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}